const r="temptracker-pro-v1.0.0",i="temptracker-static-v1.0.0",a="temptracker-dynamic-v1.0.0",l=["/","/index.html","/src/main.tsx","/src/App.tsx","/src/App.css","/src/index.css","/manifest.json"],f=["https://cristyspizza.sharepoint.com","https://login.microsoftonline.com","https://graph.microsoft.com","/_api/","/contextinfo"];self.addEventListener("install",t=>{console.log("[SW] Installing service worker..."),t.waitUntil(caches.open(i).then(e=>(console.log("[SW] Caching static assets"),e.addAll(l))).then(()=>(console.log("[SW] Service worker installed successfully"),self.skipWaiting())).catch(e=>{console.error("[SW] Failed to cache static assets:",e)}))});self.addEventListener("activate",t=>{console.log("[SW] Activating service worker..."),t.waitUntil(caches.keys().then(e=>Promise.all(e.map(o=>{if(o!==i&&o!==a&&o!==r)return console.log("[SW] Deleting old cache:",o),caches.delete(o)}))).then(()=>(console.log("[SW] Service worker activated"),self.clients.claim())))});self.addEventListener("fetch",t=>{const e=new URL(t.request.url);d(e.href)||t.request.method==="GET"&&t.respondWith(h(t.request))});self.addEventListener("sync",t=>{console.log("[SW] Background sync triggered:",t.tag),t.tag==="background-sync-temptracker"&&t.waitUntil(u())});self.addEventListener("push",t=>{if(console.log("[SW] Push message received"),t.data){const e=t.data.json(),o={body:e.body||"Temperature alert for your equipment",icon:"/icons/icon-192x192.png",badge:"/icons/icon-72x72.png",vibrate:[200,100,200],data:e,actions:[{action:"view",title:"View Details",icon:"/icons/action-view.png"},{action:"dismiss",title:"Dismiss",icon:"/icons/action-dismiss.png"}]};t.waitUntil(self.registration.showNotification(e.title||"TempTracker Alert",o))}});self.addEventListener("notificationclick",t=>{console.log("[SW] Notification clicked:",t.action),t.notification.close(),t.action==="view"&&t.waitUntil(clients.openWindow("/?from=notification"))});function d(t){return f.some(e=>t.includes(e))}async function h(t){const e=new URL(t.url);return g(e.pathname)?p(t,i):w(t,a)}function g(t){return[".js",".css",".png",".jpg",".jpeg",".svg",".ico",".woff",".woff2"].some(o=>t.endsWith(o))||t==="/"||t==="/index.html"||t==="/manifest.json"}async function p(t,e){try{const o=await caches.open(e),c=await o.match(t);if(c)return console.log("[SW] Serving from cache:",t.url),c;console.log("[SW] Cache miss, fetching from network:",t.url);const n=await fetch(t);return n.ok&&o.put(t,n.clone()),n}catch(o){if(console.error("[SW] Cache first strategy failed:",o),t.destination==="document")return(await caches.open(i)).match("/index.html");throw o}}async function w(t,e){try{console.log("[SW] Attempting network request:",t.url);const o=await fetch(t);return o.ok&&(await caches.open(e)).put(t,o.clone()),o}catch(o){console.log("[SW] Network failed, trying cache:",t.url);const n=await(await caches.open(e)).match(t);if(n)return console.log("[SW] Serving stale content from cache:",t.url),n;if(t.destination==="document"){const s=await(await caches.open(i)).match("/index.html");if(s)return s}throw console.error("[SW] Network first strategy failed:",o),o}}async function u(){console.log("[SW] Syncing offline actions...");try{const t=await self.clients.matchAll();t.length>0&&t.forEach(e=>{e.postMessage({type:"BACKGROUND_SYNC",action:"SYNC_OFFLINE_DATA"})}),console.log("[SW] Background sync completed")}catch(t){throw console.error("[SW] Background sync failed:",t),t}}self.addEventListener("message",t=>{t.data&&t.data.type==="SKIP_WAITING"&&(console.log("[SW] Received skip waiting message"),self.skipWaiting())});console.log("[SW] Service worker script loaded");
